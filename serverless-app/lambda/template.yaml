AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloudfront-lambda-register

  Sample SAM Template for cloudfront-lambda-register

Parameters:
  UserPoolId:
    Type: String
    Default: ''
  AwsAccessKeyId:
    Type: String
    Default: ''
  AwsSecretAccessKey:
    Type: String
    Default: ''
  AwsSessionToken:
    Type: String
    Default: ''
  LambdaRoleName:
    Type: String
  HostZoneId:
    Type: String
    Default: ''
  RegionalCertificateArn:
    Type: String
    Default: ''
  DomainName:
    Type: String
    Default: ''

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    Runtime: nodejs18.x
    MemorySize: 256
  Api:
    Cors:
      AllowMethods: "'GET,POST,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                IpAddress:
                  aws:SourceIp: '13.114.22.14/32'
            - Effect: Deny
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                NotIpAddress:
                  aws:SourceIp: '13.114.22.14/32'

  UserResister:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPoolId: !Ref UserPoolId
          AwsAccessKeyId: !Ref AwsAccessKeyId
          AwsSecretAccessKey: !Ref AwsSecretAccessKey
          AwsSessionToken: !Ref AwsSessionToken
      CodeUri: lambdafunction/
      Handler: userResister.lambdaHandler
      Architectures:
        - x86_64
      Role:
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}'
      Events:
        userResister:
          Type: Api
          Properties:
            Path: /api/users
            Method: post
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - controller/userResister.ts

  UsersFindAllByGroup:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPoolId: !Ref UserPoolId
          AwsAccessKeyId: !Ref AwsAccessKeyId
          AwsSecretAccessKey: !Ref AwsSecretAccessKey
          AwsSessionToken: !Ref AwsSessionToken
      CodeUri: lambdafunction/
      Handler: usersFindAllByGroup.lambdaHandler
      Architectures:
        - x86_64
      Role:
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}'
      Events:
        usersFindAllByGroup:
          Type: Api
          Properties:
            Path: /api/users/{group}
            Method: get
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - controller/usersFindAllByGroup.ts

  UserDelete:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPoolId: !Ref UserPoolId
          AwsAccessKeyId: !Ref AwsAccessKeyId
          AwsSecretAccessKey: !Ref AwsSecretAccessKey
          AwsSessionToken: !Ref AwsSessionToken
      CodeUri: lambdafunction/
      Handler: userDelete.lambdaHandler
      Architectures:
        - x86_64
      Role:
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}'
      Events:
        userDelete:
          Type: Api
          Properties:
            Path: /api/users
            Method: delete
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - controller/userDelete.ts

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayApi
      StageName: Dev

  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref RegionalCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayApi
      - ApiGatewayDeployment
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ApiGatewayApi
      Stage: Dev

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt CustomDomain.RegionalHostedZoneId